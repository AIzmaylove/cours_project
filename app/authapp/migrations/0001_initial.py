<<<<<<< HEAD
# Generated by Django 4.1.7 on 2023-03-29 14:08

import django.contrib.auth.validators
from django.db import migrations, models
import uuid
=======
# Generated by Django 4.1.7 on 2023-03-18 18:35

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone
>>>>>>> BW


class Migration(migrations.Migration):

    initial = True

    dependencies = [
<<<<<<< HEAD
        ('backend', '0001_initial'),
=======
>>>>>>> BW
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseIdeinerUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
<<<<<<< HEAD
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('age', models.PositiveIntegerField(default=18, verbose_name='возраст')),
                ('email', models.CharField(default='', max_length=40, unique=True, verbose_name='email')),
                ('username', models.CharField(default='', max_length=40, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='логин')),
                ('surname', models.CharField(default='', max_length=40, verbose_name='фамилия')),
                ('first_name', models.CharField(default='', max_length=40, verbose_name='имя')),
=======
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(default=18, verbose_name='возраст')),
                ('nickname', models.CharField(default='', max_length=40, verbose_name='ник')),
                ('email', models.CharField(default='', max_length=40, verbose_name='email')),
                ('username', models.CharField(default='', max_length=40, unique=True, verbose_name='username')),
                ('surname', models.CharField(default='', max_length=40, verbose_name='surname')),
>>>>>>> BW
                ('avatar', models.ImageField(blank=True, default='', upload_to='media/users_avatars')),
                ('password', models.CharField(default='', max_length=40, verbose_name='password')),
                ('registrationdate', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
<<<<<<< HEAD
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('posts_liked', models.ManyToManyField(related_name='liked_by', to='backend.idea')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
=======
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
>>>>>>> BW
        ),
    ]
